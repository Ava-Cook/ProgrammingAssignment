/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.34
 * Generated at: 2025-04-08 02:13:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.List;
import seng2050.Course;
import seng2050.CourseBean;
import java.util.Map;
import seng2050.RegisterDAO;
import java.util.Set;
import java.util.HashSet;

public final class courses_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(10);
    _jspx_imports_classes.add("java.util.HashSet");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("seng2050.Course");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("java.util.Set");
    _jspx_imports_classes.add("seng2050.CourseBean");
    _jspx_imports_classes.add("seng2050.RegisterDAO");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "header.jspf", out, false);
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>Course Offerings</title>\r\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"courses.css\">\r\n");
      out.write("    <script src=\"courses.js\" defer></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <h2>Available Courses for Selected Semester</h2>\r\n");
      out.write("\r\n");
      out.write("    ");
 
        Integer semesterID = (Integer) session.getAttribute("selectedSemester");
        Integer currentCreditsObj = (Integer) request.getAttribute("currentCredits");
        int currentCredits = currentCreditsObj != null ? currentCreditsObj : 0;
        boolean isAtCreditLimit = currentCredits >= 40;
        String studentNo = (String) session.getAttribute("studentNo"); // Assume student's studentNo is stored in session
        List<Course> enrolledCourses = RegisterDAO.getRegisteredCourses(studentNo, semesterID); // Fetch enrolled courses

        // Create a set of enrolled course IDs for quick lookup
        Set<String> enrolledCourseIDs = new HashSet<>();
        for (Course course : enrolledCourses) {
            enrolledCourseIDs.add(course.getCourseID());
        }
        if (semesterID != null) { 
    
      out.write("\r\n");
      out.write("    <p>\r\n");
      out.write("        <strong>Selected Semester ID:</strong> ");
      out.print( semesterID );
      out.write("\r\n");
      out.write("        <div class=\"change-semester-btn\">\r\n");
      out.write("        <form action=\"semester.jsp\">\r\n");
      out.write("            <button type=\"submit\">Change Semester</button>\r\n");
      out.write("        </form>\r\n");
      out.write("        </div>\r\n");
      out.write("        \r\n");
      out.write("    </p>\r\n");
      out.write("        <p><strong>Credits Enrolled:</strong> <span id=\"currentCredits\">");
      out.print( currentCredits );
      out.write("</span>/40</p>\r\n");
      out.write("    ");
 
        } else { 
    
      out.write("\r\n");
      out.write("        <p><strong>Error:</strong> No semester selected.</p>\r\n");
      out.write("    ");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");

        Map<String, Boolean> fullCourses = (Map<String, Boolean>) request.getAttribute("fullCourses");
        CourseBean courseBean = (CourseBean) request.getAttribute("courseBean");
        if (courseBean != null && !courseBean.getCourses().isEmpty()) {
    
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <form action=\"EnrollServlet\" method=\"post\">\r\n");
      out.write("        <table border=\"1\">\r\n");
      out.write("            <tr>\r\n");
      out.write("                <th>Course ID</th>\r\n");
      out.write("                <th>Course Name</th>\r\n");
      out.write("                <th>Credits</th>\r\n");
      out.write("                <th>Action</th>\r\n");
      out.write("            </tr>\r\n");
      out.write("\r\n");
      out.write("            ");
 for (Course course : courseBean.getCourses()) {
                   boolean isFull = fullCourses != null && fullCourses.getOrDefault(course.getCourseID(), false);
                   boolean isEnrolled = enrolledCourseIDs.contains(course.getCourseID());
            
      out.write("\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>");
      out.print( course.getCourseID() );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( course.getCourseName() );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( course.getCredits() );
      out.write("</td>\r\n");
      out.write("                <td>\r\n");
      out.write("                    ");
 if (isFull) { 
      out.write("\r\n");
      out.write("                        <button type=\"button\" class=\"enroll-btn disabled\" disabled title=\"Course is full\">Full</button>\r\n");
      out.write("                    ");
 } else if (isAtCreditLimit) { 
      out.write("\r\n");
      out.write("                        <button type=\"button\" class=\"enroll-btn disabled\" disabled title=\"Credit limit reached\">Maxed</button>\r\n");
      out.write("                    ");
 }else if (isEnrolled) { 
      out.write("\r\n");
      out.write("                        <button type=\"button\" class=\"enroll-btn disabled\" disabled title=\"Already enrolled\">Enrolled</button> \r\n");
      out.write("                    ");
 } else { 
      out.write("\r\n");
      out.write("                    \r\n");
      out.write("                        <button \r\n");
      out.write("                            type=\"button\" \r\n");
      out.write("                            class=\"enroll-btn ");
      out.print( isFull ? "disabled" : "" );
      out.write("\" \r\n");
      out.write("                            data-courseid=\"");
      out.print( course.getCourseID() );
      out.write("\" \r\n");
      out.write("                            data-credits=\"");
      out.print( course.getCredits() );
      out.write("\"\r\n");
      out.write("                            ");
      out.print( isFull ? "disabled title='Course is full'" : "" );
      out.write(">\r\n");
      out.write("                            ");
      out.print( isFull ? "Full" : "Enroll" );
      out.write("\r\n");
      out.write("                        </button>\r\n");
      out.write("\r\n");
      out.write("                        <input \r\n");
      out.write("                            type=\"checkbox\" \r\n");
      out.write("                            name=\"selectedCourses\" \r\n");
      out.write("                            value=\"");
      out.print( course.getCourseID() );
      out.write("\" \r\n");
      out.write("                            id=\"input-");
      out.print( course.getCourseID() );
      out.write("\" \r\n");
      out.write("                            style=\"display:none;\">\r\n");
      out.write("                    ");
 } 
      out.write("\r\n");
      out.write("                </td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            ");
 } 
      out.write("\r\n");
      out.write("        </table>\r\n");
      out.write("        <br>\r\n");
      out.write("        <input type=\"submit\" value=\"Confirm\" class=\"submit-btn\">\r\n");
      out.write("    </form>\r\n");
      out.write("\r\n");
      out.write("    ");
 } else { 
      out.write("\r\n");
      out.write("        <p>No courses available for this semester.</p>\r\n");
      out.write("    ");
 } 
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
